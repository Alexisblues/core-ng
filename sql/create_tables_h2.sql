-- DAPNET Core H2 Database Creation
-- Version 0.1 2018-02-28

DROP ALL OBJECTS;

SET COLLATION ENGLISH STRENGTH SECONDARY;

CREATE TABLE users(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR_IGNORECASE(50) NOT NULL UNIQUE,
	password VARCHAR(50) NOT NULL,
	email VARCHAR_IGNORECASE(255) NOT NULL,
	is_admin BOOLEAN NOT NULL,
	is_enabled BOOLEAN NOT NULL,
	created_on DATETIME NOT NULL,
	last_login DATETIME
);

CREATE TABLE nodes(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR_IGNORECASE(20) NOT NULL UNIQUE,
	status ENUM('UNKNOWN', 'OFFLINE', 'ONLINE', 'ERROR') NOT NULL,
	last_update DATETIME,
	version VARCHAR(20),
	ip_address VARCHAR(45),
	latitude DECIMAL(9, 6),
	longitude DECIMAL(9, 6)
);

CREATE TABLE node_owners(
	node_id INT NOT NULL,
	user_id INT NOT NULL,
	FOREIGN KEY (node_id) REFERENCES nodes(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE pagers(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	ric INT NOT NULL,
	subaddress ENUM('A', 'B', 'C', 'D') NOT NULL,
	name VARCHAR_IGNORECASE(20) NOT NULL,
	type ENUM('UNKNOWN', 'SKYPER', 'ALPHAPOC', 'QUIX', 'SWISSPHONE', 'SCALL_XT') NOT NULL,
	is_enabled BOOLEAN NOT NULL,
	CONSTRAINT pager_address UNIQUE(ric, subaddress)
);

CREATE TABLE callsigns(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR_IGNORECASE(20) NOT NULL UNIQUE,
	numeric_only BOOLEAN NOT NULL,
	description VARCHAR(100)
);

CREATE TABLE callsign_owners(
	callsign_id INT NOT NULL,
	user_id INT NOT NULL,
	FOREIGN KEY (callsign_id) REFERENCES callsigns(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE callsign_pagers(
	callsign_id INT NOT NULL,
	pager_id INT NOT NULL,
	FOREIGN KEY (callsign_id) REFERENCES callsigns(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (pager_id) REFERENCES pagers(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE callsign_groups(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR_IGNORECASE(20) NOT NULL UNIQUE,
	is_public BOOLEAN NOT NULL,
	description VARCHAR(100)
);

CREATE TABLE callsign_group_membership(
	group_id INT NOT NULL,
	callsign_id INT NOT NULL,
	FOREIGN KEY (group_id) REFERENCES callsign_groups(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (callsign_id) REFERENCES callsigns(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE calls(
	id LONG AUTO_INCREMENT PRIMARY KEY NOT NULL,
	text VARCHAR(100) NOT NULL,
	priority ENUM('LOWEST', 'LOWER', 'NORMAL', 'HIGHER', 'HIGHEST') NOT NULL,
	is_emergency BOOLEAN NOT NULL,
	posted_by INT NOT NULL,
	posted_on DATETIME NOT NULL,
	FOREIGN KEY (posted_by) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE call_recipients(
	call_id LONG NOT NULL,
	callsign_id INT NOT NULL,
	FOREIGN KEY (call_id) REFERENCES calls(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (callsign_id) REFERENCES callsigns(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE rubrics(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	number INT NOT NULL UNIQUE,
	name VARCHAR_IGNORECASE(20) NOT NULL UNIQUE,
	label VARCHAR_IGNORECASE(11) NOT NULL
);

CREATE TABLE rubric_owners(
	rubric_id INT NOT NULL,
	user_id INT NOT NULL,
	FOREIGN KEY (rubric_id) REFERENCES rubrics(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE news(
	id LONG AUTO_INCREMENT PRIMARY KEY NOT NULL,
	text VARCHAR(100) NOT NULL,
	rubric INT NOT NULL,
	posted_by INT NOT NULL,
	posted_on DATETIME NOT NULL,
	slot INT NOT NULL,
	scheduled_for DATETIME,
	FOREIGN KEY (rubric) REFERENCES rubrics(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (posted_by) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE transmitters(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR_IGNORECASE(20) NOT NULL UNIQUE,
	auth_key VARCHAR(64) NOT NULL,
	is_enabled BOOLEAN NOT NULL,
	status ENUM('UNKNOWN', 'OFFLINE', 'ONLINE', 'ERROR') NOT NULL,
	usage_type ENUM('PERSONAL', 'WIDERANGE') NOT NULL,
	aprs_enabled BOOLEAN NOT NULL,
	last_update DATETIME,
	last_connect DATETIME,
	connected_since DATETIME,
	ip_address VARCHAR(45),
	device_type VARCHAR(30),
	device_version VARCHAR(30),
	node_id INT,
	latitude DECIMAL(9, 6),
	longitude DECIMAL(9, 6),
	rf_power FLOAT,
	antenna_agl SMALLINT,
	antenna_gain_dbi FLOAT,
	antenna_type ENUM('OMNI', 'DIRECTIONAL'),
	antenna_direction SMALLINT,
	FOREIGN KEY (node_id) REFERENCES nodes(id) ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE transmitter_owners(
	transmitter_id INT NOT NULL,
	user_id INT NOT NULL,
	FOREIGN KEY (transmitter_id) REFERENCES transmitters(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE transmitter_groups(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR_IGNORECASE(20) NOT NULL UNIQUE,
	is_official BOOLEAN NOT NULL,
	description VARCHAR(100)
);

CREATE TABLE transmitter_group_owners(
	group_id INT NOT NULL,
	user_id INT NOT NULL,
	FOREIGN KEY (group_id) REFERENCES transmitter_groups(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE transmitter_group_membership(
	group_id INT NOT NULL,
	transmitter_id INT NOT NULL,
	FOREIGN KEY (group_id) REFERENCES transmitter_groups(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (transmitter_id) REFERENCES transmitters(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE rubric_transmitter_groups(
	rubric_id INT NOT NULL,
	group_id INT NOT NULL,
	FOREIGN KEY (rubric_id) REFERENCES rubrics(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (group_id) REFERENCES transmitter_groups(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE call_transmitters(
	call_id LONG NOT NULL,
	transmitter_id INT,
	FOREIGN KEY (call_id) REFERENCES calls(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (transmitter_id) REFERENCES transmitters(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE call_transmitter_groups(
	call_id LONG NOT NULL,
	group_id INT,
	FOREIGN KEY (call_id) REFERENCES calls(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (group_id) REFERENCES transmitter_groups(id) ON UPDATE CASCADE ON DELETE CASCADE
);
