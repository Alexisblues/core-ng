-- DAPNET Core Table Creation
-- Version 1.0 2018-02-26

DROP TABLE IF EXISTS users;
CREATE TABLE users(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR(50) NOT NULL UNIQUE,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(255) NOT NULL,
	is_admin BOOLEAN NOT NULL,
	is_enabled BOOLEAN NOT NULL,
	created_on DATETIME NOT NULL,
	last_login DATETIME
);

DROP TABLE IF EXISTS nodes;
CREATE TABLE nodes(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR(50) NOT NULL UNIQUE,
	status VARCHAR(20) NOT NULL,
	last_update DATETIME
);

DROP TABLE IF EXISTS pagers;
CREATE TABLE pagers(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	number INT NOT NULL UNIQUE,
	name VARCHAR(20) NOT NULL,
	type VARCHAR(20) NOT NULL,
	is_alphanum BOOLEAN NOT NULL
);

DROP TABLE IF EXISTS callsigns;
CREATE TABLE callsigns(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR(20) NOT NULL UNIQUE,
	description VARCHAR(100)
);

DROP TABLE IF EXISTS callsign_owners;
CREATE TABLE callsign_owners(
	callsign_id INT NOT NULL,
	user_id INT NOT NULL,
	FOREIGN KEY(callsign_id) REFERENCES callsigns(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS callsign_pagers;
CREATE TABLE callsign_pagers(
	callsign_id INT NOT NULL,
	pager_id INT NOT NULL,
	FOREIGN KEY(callsign_id) REFERENCES callsigns(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(pager_id) REFERENCES pagers(id) ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS calls;
CREATE TABLE calls(
	id LONG AUTO_INCREMENT PRIMARY KEY NOT NULL,
	text VARCHAR(100) NOT NULL,
	is_emergency BOOLEAN NOT NULL,
	posted_by INT NOT NULL,
	posted_on DATETIME NOT NULL,
	FOREIGN KEY(posted_by) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS rubrics;
CREATE TABLE rubrics(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	number INT NOT NULL,
	name VARCHAR(20) NOT NULL,
	label VARCHAR(11) NOT NULL
);

DROP TABLE IF EXISTS rubric_owners;
CREATE TABLE rubric_owners(
	rubic_id INT NOT NULL,
	user_id INT NOT NULL,
	FOREIGN KEY (rubic_id) REFERENCES rubrics(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

DROP TABLE IF EXISTS news;
CREATE TABLE news(
	id LONG AUTO_INCREMENT PRIMARY KEY NOT NULL,
	text VARCHAR(100) NOT NULL,
	rubric INT NOT NULL,
	posted_by INT NOT NULL,
	posted_on DATETIME NOT NULL,
	number INT NOT NULL,
	FOREIGN KEY(rubric) REFERENCES rubrics(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(posted_by) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS transmitters;
CREATE TABLE transmitters(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR(20) NOT NULL UNIQUE,
	auth_key VARCHAR(64) NOT NULL,
	status VARCHAR(30) NOT NULL,
	last_update DATETIME,
	last_connect DATETIME,
	connected_since DATETIME,
	device_type VARCHAR(30),
	device_version VARCHAR(30),
	node_id INT,
	FOREIGN KEY(node_id) REFERENCES nodes(id) ON UPDATE CASCADE ON DELETE SET NULL
);

DROP TABLE IF EXISTS transmitter_groups;
CREATE TABLE transmitter_groups(
	id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
	name VARCHAR(20) NOT NULL UNIQUE,
	description VARCHAR(100)
);

DROP TABLE IF EXISTS transmitter_group_owners;
CREATE TABLE transmitter_group_owners(
	group_id INT NOT NULL,
	user_id INT NOT NULL,
	FOREIGN KEY (group_id) REFERENCES transmitter_groups(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

DROP TABLE IF EXISTS transmitter_group_membership;
CREATE TABLE transmitter_group_membership(
	group_id INT NOT NULL,
	transmitter_id INT NOT NULL,
	FOREIGN KEY (group_id) REFERENCES transmitter_groups(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (transmitter_id) REFERENCES transmitters(id) ON UPDATE CASCADE ON DELETE CASCADE
);
